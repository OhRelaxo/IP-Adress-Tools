from Tools.shorten_lengthen_ipv6.output import output_shorten_ipv6, output_lenghten_ipv6
from Tools.subnet_calc.calc import output_subcalc
from Tools.ip_conversion.ipv4_to_ipv6 import output_ip4to6
import argparse

def main():
    parser = argparse.ArgumentParser()
    # write a better help thing, I think it should be good now :)
    parser.add_argument("--subcalc", type=str, help="with subcalc (I know horrible name, but that is just how "
                                                                "it goes with programming, I mean what is malloc supposed to mean?)"
                                                                "you can calculate the subnet of a given IP-Address"
                                                                "Input: IP-Address with subnet prefix for example: 192.168.0.1/24"
                                                                "other supported flags: --export and also --verbose with it")
    parser.add_argument("--export", choices=["csv", "json"], help="exports the generated subnet as a csv or json,"
                                                                  "depending on the input: csv, json")
    parser.add_argument("--verbose", action="store_true", help="will also output the data to the commandline"
                                                                            "compatible with --export and --input"
                                                                            "can only be used with the --export/--import flag!")
    parser.add_argument("--ip4to6", type=str, help="with ip4to6 you can convert an ipv4 address to an ipv6 address."
                                                                "Input: --ipv4to6 <IP-Address> (e.g.: 192.168.0.1) without a subnet prefix!")
    parser.add_argument("--input", type=str, help="input a csv file for ip4to6, shortenipv6 or lengthenipv6,"
                                                                "it will also write the output into a csv file, "
                                                                "note: it uses the first row, so u need to put your data into the first column!"
                                                                "the command can also be used with --verbose")
    parser.add_argument("--long", action="store_true", help="toggle if the ipv6 address generated by ip4to6 is not shorten")
    parser.add_argument("--shortenipv6", type=str, help="outputs a short ipv6")
    parser.add_argument("--lengthenipv6", tpye=str, help="outputs a lengthen ipv6")
    args = parser.parse_args()


    if args.subcalc:
        output_subcalc(args)

    if args.ip4to6:
        output_ip4to6(args)

    if args.shortenipv6:
        output_shorten_ipv6(args)

    if args.lenghtenipv6:
        output_lenghten_ipv6(args)

if __name__ == '__main__':
    main()